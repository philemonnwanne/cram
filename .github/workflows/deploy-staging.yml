# .github/workflows/deploy-staging.yaml
name: 🧙🏾‍♂️ Deploy to Environment
run-name: 🪼 creation by ${{ github.actor }}
on:
  workflow_call:
env:
  GH_TOKEN: ${{ github.token }}

jobs:
  deploy-staging:
    environment:
      staging
      # url: ${{ steps.step_id.outputs.url_output }}
    permissions:
      id-token: write
      contents: read
    name: 🐧 Deploy to Staging
    defaults:
      run:
        working-directory: "./terraform"
    # strategy:
    #   matrix:
    #     os: [ubuntu-latest]
    # runs-on: ${{ matrix.os }}
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: true
      # REGION: ${{ vars.AWS_DEFAULT_REGION }}
      TF_INPUT: 0
      # ROLE_ARN: ${{ secrets.ACTIONS_ROLE_ARN }}
      TF_STATE: ${{ secrets.TF_STATE }} # S3 bucket for the Terraform state
    steps:
      - name: 🛒 Checkout Repo
        uses: actions/checkout@v3

      - run: |
          ls -R
          echo "👷🏾‍♂️ Target environment is staging"

      - run: echo "Dir is... ${PWD}"

      - name: 🦢 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.ACTIONS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: 📥 Download ReactJS Artifact from `Build` Workflow Run
        run: |
          gh run download -n react-app -n tf_plan
          ls -R

      # - name: Move Artifact to Frontend Directory
      #   run: |
      #     mkdir ${GITHUB_WORKSPACE}/frontend/dist
      #     mv release/* ${GITHUB_WORKSPACE}/frontend/dist

      # - name: 🚦 Setup Terraform
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_wrapper: true

      # - name: 📥 Download TF Plan Artifact from `Build` Workflow Run
      #   run: |
      #     gh run download -n react-app
      #     ls -R

      # - name: 🍀 Terraform Init
      #   id: init
      #   run: terraform init -backend-config="bucket=$TF_STATE"

      - name: 🧙🏾‍♂️ Terraform Apply Staging
        run: |
          # terraform apply "tf_plan"
          ls -R
          echo "Deploy to staging successfull 🎉"

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: 📥 Download all Artifacts
        run: |
          gh run download -n react-app -n tf_plan

      - name: Display structure of downloaded files
        run: ls -R

      - name: Zip Artifact # we can't attach a folder to a release
        run: |
          zip tripevibe-artifacts.zip react-app/release.zip tf_plan/tf_plan -r

      - name: 🏷️ Create Release Tag
        id: create-release-tag
        run: |
          export LEFT_PAD_NUM=1
          echo "tag_name=v$(printf %d.0.0 $LEFT_PAD_NUM)" >> $GITHUB_OUTPUT

      - name: ➛ Create Draft Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create-release-tag.outputs.tag_name }}
          name: ${{ steps.create-release-tag.outputs.tag_name }}
          body: |
            ## ℹ️ Info
            Commit ${{ github.sha }} was deployed to `staging`. [See code diff](${{ github.event.compare }}).

            ✨ It was initialized by [${{ github.event.sender.login }}](${{ github.event.sender.html_url }}).

            ## 👨🏾‍💻 How to Promote
            In order to promote this to Production, edit the draft and press **"Publish release"**. ✅
          draft: true
          files: tripevibe-artifacts.zip
