# name: ⛅️ Create AZURE App 🕋
name: creaty
run-name: creation by ${{ github.actor }} 🪼
on:
  # workflow_dispatch:
  workflow_call:
  # push:

defaults:
  run:
    working-directory: "./azure"

# permissions:
#   id-token: write # required for requesting the JWT
#   contents: read # required for actions/checkout

jobs:
  create_job:
    name: 🐢 Terraform Infrastructure MOC 🐧
    strategy:
      matrix:
        os: [ubuntu-latest]
        # environment: [ stage, prod ]
    runs-on: ${{ matrix.os }}
    # environment: ${{ matrix.environment }}
    env:
      TF_IN_AUTOMATION: true
      TF_INPUT: 0
      TF_STATE: ${{ secrets.TF_STATE }} # S3 bucket for the Terraform state
    steps:
      - name: Checkout 🛒
        uses: actions/checkout@v3

      - name: Configure AWS Credentials 🦢
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.ACTIONS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Setup Terraform 🚦
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: true

      - name: Terraform Format ℹ
        id: fmt
        run: terraform fmt -check

      - name: 🍀 Terraform Init 🍁
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE"

      - name: Terraform Validate  ✅
        id: validate
        run: terraform validate

      - name: Terraform Plan 👨🏾‍💻
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Pull Request Comment 💬
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            const output = `#### Terraform Format and Style 🖌 \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️ \`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖 \`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Apply 💭
        # run: exit 1
        if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        # run: terraform apply -auto-approve
        run: echo " hrelooooo "
