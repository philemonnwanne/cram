name: üß± Generate Build Artifact
on:
  workflow_call:
env:
  NODE_VERSION: "16.x" # set this to the node version to use

jobs:
  build-frontend:
    name: üë∑üèæ‚Äç‚ôÇÔ∏è Build Static Assets
    defaults:
      run:
        working-directory: "./frontend"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node and Cache
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install only the Lint Package
        run: npm ci

      - name: Build Artifact
        run: npm run build --if-present

      - name: Zip Artifact for Deployment
        run: |
          cd dist
          zip release.zip ./* -r

      - name: üì§ Upload Artifact for Deployment Job
        uses: actions/upload-artifact@v3
        with:
          name: react-app
          path: ${{ github.workspace }}/frontend/dist/release.zip

  # build-backend:
  #   name: üçü Deploy Image to ECS
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: "./backend"
  #   steps:
  #     - name: Checkout Repo üõí
  #       uses: actions/checkout@v3

  #     - name: Configure AWS Credentials ü¶¢
  #       uses: aws-actions/configure-aws-credentials@v3
  #       with:
  #         role-to-assume: ${{ secrets.ACTIONS_ROLE_ARN }}
  #         aws-region: ${{ vars.AWS_DEFAULT_REGION }}

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
  #       with:
  #         mask-password: "true"

  #     - name: Build, Tag, and Push Docker Image to Amazon ECR
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         IMAGE_TAG: ${{ github.sha }}
  #         ECR_REPOSITORY: azure
  #       run: |
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  plan-output:
    name: üë®üèæ‚Äçüíª Output Terraform Plan
    defaults:
      run:
        working-directory: ${{ env.tf_working_dir }}
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: true
      tf_working_dir: "./terraform"
      TF_INPUT: 0
      TF_STATE: ${{ secrets.TF_STATE }} # S3 bucket for the Terraform state
    steps:
      - name: Checkout Repo üõí
        uses: actions/checkout@v3

      - name: Configure AWS Credentials ü¶¢
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.ACTIONS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Setup Terraform üö¶
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: true

      - name: üçÄ Terraform Init üçÅ
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE"

      - name: Terraform Format ‚Ñπ
        id: fmt
        run: terraform fmt -check -recursive -diff

      - name: Terraform Validate  ‚úÖ
        id: validate
        run: terraform validate

      - name: Terraform Plan üë®üèæ‚Äçüíª
        id: plan
        # if: github.event_name == 'pull_request'
        run: terraform plan -out "tf_plan"
        continue-on-error: true

      - uses: actions/github-script@v6
        with:
          script: |
            const script = require('.comment.js')
            console.log(script({github, context}))

      # - uses: actions/github-script@v6
      #   if: github.event_name == 'push'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       // 1. Retrieve existing bot comments for the PR
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #       })
      #       const botComment = comments.find(comment => {
      #         return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
      #       })
      
      #       // 2. Prepare format of the comment
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       <details><summary>Validation Output</summary>
      
      #       \`\`\`\n
      #       ${{ steps.validate.outputs.stdout }}
      #       \`\`\`
      
      #       </details>
      
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
      #       <details><summary>Show Plan</summary>
      
      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`
      
      #       </details>
      
      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
      #       // 3. If we have a comment, update it, otherwise create a new one
      #       if (botComment) {
      #         github.rest.issues.updateComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: botComment.id,
      #           body: output
      #         })
      #       } else {
      #         github.rest.issues.createComment({
      #           issue_number: context.issue.number,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: output
      #         })
      #       }

      - name: üì§ Upload TF Plan
        uses: actions/upload-artifact@v3
        with:
          name: tf_plan
          path: ${{ github.workspace }}/terraform/tf_plan
          # if-no-files-found: error
          # retention-days: 1

  # get-artifact:
  #   # environment: staging
  #   name: Download Build Files
  #   needs: plan-output
  #   # strategy:
  #   #   matrix:
  #   #     os: [ubuntu-latest]
  #   # runs-on: ${{ matrix.os }}
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Repo üõí
  #       uses: actions/checkout@v3

  #     - name: üì• Download artifact from build job
  #       env:
  #         GH_TOKEN: ${{ github.token }}
  #       run: |
  #         sleep 60s
  #         gh run download -n react-app -n tf_plan

  #     - name: Unzip Artifact for Deployment
  #       run: |
  #         unzip react-app/release.zip -d release
  #         ls -lR

  #     - name: Move Artifact to Frontend Directory
  #       run: |
  #         mkdir ${GITHUB_WORKSPACE}/frontend/dist
  #         mv release/* ${GITHUB_WORKSPACE}/frontend/dist
