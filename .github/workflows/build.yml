name: 🧱 Generate Build Artifact 🧱 
on:
  workflow_call:
env:
  NODE_VERSION: "16.14.2" # set this to the node version to use
  env:

jobs:
  build_frontend:
    name: 👷🏾‍♂️ Build Static Assets
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./frontend"
    steps:
      - name: Checkout Repo 🛒
        uses: actions/checkout@v3

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Dependencies
        run: npm ci

      - name: Build Artifact
        run: npm run build --if-present 

      - name: Zip Artifact for Deployment
        run: |
          cd dist
          zip release.zip ./* -r

      - name: Upload Artifact for Deployment Job
        uses: actions/upload-artifact@v3
        with:
          name: react-app
          path: ./dist/release.zip

  build_backend:
    name: 🍟 Deploy Image to ECS 
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./backend"
    steps:
      - name: Checkout Repo 🛒
        uses: actions/checkout@v3

      - name: Configure AWS Credentials 🦢
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.ACTIONS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: "true"

      - name: Build, Tag, and Push Docker Image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: azure
        run: |
          docker build -t ${env.ECR_REGISTRY}/${env.ECR_REPOSITORY}:${env.IMAGE_TAG} .
          docker push ${env.ECR_REGISTRY}/${env.ECR_REPOSITORY}:${env.IMAGE_TAG}

  plan_output:
    name: 👨🏾‍💻 Output Terraform Plan
    defaults:
      run:
        working-directory: "./terraform"
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    env:
      TF_IN_AUTOMATION: true
      TF_INPUT: 0
      TF_STATE: ${{ secrets.TF_STATE }} # S3 bucket for the Terraform state
    steps:
      - name: Checkout Repo 🛒
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials 🦢
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.ACTIONS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Setup Terraform 🚦
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: true

      - name: 🍀 Terraform Init 🍁
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE"
        
      - name: Terraform Plan 👨🏾‍💻
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -out "tf_plan"
        continue-on-error: true

      - name: Upload TF Plan ☁️
        uses: actions/upload-artifact@v2
        with:
          name: tf_plan
          path: ./plans/tf_plan
          if-no-files-found: error
          retention-days: 1
